Arg	arg.h	/^} Arg;$/
Cluster	optics.h	/^} Cluster;$/
ClusterList	optics.h	/^} ClusterList;$/
Dat	coords_vec.h	/^} Dat;$/
Epsn	optics.h	/^} Epsn;$/
MergeSort	sort.c	/^void MergeSort(void *array, size_t size, size_t es/
Moptics	optics.c	/^int main(int argc, char *argv[])$/
OpticsDat	optics.h	/^} OpticsDat;$/
Par	optics.h	/^} Par;$/
Pt	optics.h	/^} Pt;$/
Vec	vector.h	/^} Vec;$/
approximately_equal	coords_vec.c	/^__inline__ int approximately_equal(float a, float /
calc_dist	coords_vec.c	/^float calc_dist(Dat *dat, int i, int j, Arg *arg) /
calc_dist_asym	coords_vec.c	/^float calc_dist_asym(Dat *dat, int i, int j, Arg */
calc_dist_ndim	coords_vec.c	/^float calc_dist_ndim(Dat *dat, int i, int j, Arg */
calc_dist_sym	coords_vec.c	/^float calc_dist_sym(Dat *dat, int i, int j, Arg *a/
cd_rd	optics.c	/^static int cd_rd(Par *par, OpticsDat *opticsdat, i/
check_non_null	safe.c	/^void *check_non_null(void *ptr)$/
compare_RD_deref	optics.c	/^__inline__ static int compare_RD_deref(Pt **a, Pt /
compare_distances	optics.c	/^__inline__ static int compare_distances(Epsn *a, E/
epsilon_neighbourhood	optics.c	/^static void epsilon_neighbourhood(Dat *dat, Par *p/
extract_root_clusters	optics.c	/^void extract_root_clusters(ClusterList *cluster_li/
extract_sub_clusters	optics.c	/^int extract_sub_clusters(Cluster *cluster, Cluster/
find_next	optics.c	/^static int find_next(OpticsDat *opticsdat)$/
get_data	coords_vec.c	/^int get_data(char *inFileName, Dat *dat)$/
initialise	optics.c	/^static int initialise(OpticsDat *opticsdat, Par *p/
max_float	optics.c	/^__inline__ static float max_float(float a, float b/
merge	sort.c	/^void merge(unsigned char *input, int left, int rig/
mergesort_hlp	sort.c	/^void mergesort_hlp(unsigned char *input, int left,/
min_float	optics.c	/^__inline__ static float min_float(float a, float b/
order	optics.c	/^static int order(Dat *dat, Par *par, OpticsDat *op/
order_by_RD	optics.c	/^void order_by_RD(Pt **RD_ordered_data, Pt **ordere/
parse_args	arg.c	/^int parse_args(int argc, char **argv, Arg *arg)$/
print_citation	arg.c	/^static void print_citation()$/
print_header	arg.c	/^static void print_header()$/
print_header_object	coords_vec.c	/^void print_header_object(FILE *outfile, Dat *dat) /
print_license	arg.c	/^static void print_license()$/
print_object	coords_vec.c	/^void print_object(FILE *outfile, Dat *dat, int ind/
print_version	arg.c	/^static void print_version()$/
reset_processed_flag	optics.c	/^static int reset_processed_flag(Pt **pointer_to_da/
rotate_2D	vector.c	/^void rotate_2D(float *dim1, float *dim2, float phi/
safe_malloc	safe.c	/^void *safe_malloc(size_t size)$/
safe_open	safe.c	/^FILE *safe_open(const char *name, const char *mode/
safe_realloc	safe.c	/^void *safe_realloc(void *ptr, size_t size)$/
set_defaults	arg.c	/^static void set_defaults(Arg *arg)$/
v_ang	vector.c	/^float v_ang(Vec *v1, Vec *v2)$/
v_copy	vector.c	/^void v_copy(Vec *v2, Vec *v1)$/
v_cro_pro	vector.c	/^void v_cro_pro(Vec *v3, Vec *v1, Vec *v2)$/
v_dif	vector.c	/^void v_dif(Vec *v3, Vec *v1, Vec *v2)$/
v_div_sca	vector.c	/^void v_div_sca(Vec *v2, Vec *v1, float a)$/
v_dot_pro	vector.c	/^float v_dot_pro(Vec *v1, Vec *v2)$/
v_len	vector.c	/^float v_len(Vec *v)$/
v_mul_sca	vector.c	/^void v_mul_sca(Vec *v2, Vec *v1, float a)$/
v_norm	vector.c	/^void v_norm(Vec *v2, Vec *v1)$/
v_put	vector.c	/^void v_put(Vec *v1)$/
v_put_char	vector.c	/^void v_put_char(Vec *v1, char *str)$/
v_rmsd	vector.c	/^float v_rmsd(Vec *v1, Vec *v2)$/
v_shift_rotate_xy	vector.c	/^Vec v_shift_rotate_xy(Vec *v1, Vec *shift, float p/
v_shift_rotate_yz	vector.c	/^Vec v_shift_rotate_yz(Vec *v1, Vec *shift, float p/
v_sum	vector.c	/^void v_sum(Vec *v3, Vec *v1, Vec *v2)$/
v_zero	vector.c	/^void v_zero(Vec *v)$/
vector_copy	vector.c	/^void vector_copy(Vec *v1, Vec *v2)$/
vector_cro_pro	vector.c	/^void vector_cro_pro(Vec *v1, Vec *v2, Vec *v3)$/
vector_dif	vector.c	/^void vector_dif(Vec *v1, Vec *v2, Vec *v3)$/
vector_div_sca	vector.c	/^void vector_div_sca(Vec *v1, float a, Vec *v2)$/
vector_mul_sca	vector.c	/^void vector_mul_sca(Vec *v1, float a, Vec *v2)$/
vector_norm	vector.c	/^void vector_norm(Vec *v1, Vec *v2)$/
vector_sum	vector.c	/^void vector_sum(Vec *v1, Vec *v2, Vec *v3)$/
